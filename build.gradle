plugins {
    id 'java'
}

group pGroup

sourceSets.main {
    java.srcDir("src/")
    resources.srcDir("assets/")
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation "com.github.Anuken.Mindustry:core:$pMindustryVersion"
}

jar {
    archiveFileName.set "plasmadustryArtifact.jar"
}

task dexify(type: Jar) {
    archiveFileName.set "dexed-$pArtifactFilename"

    final File jarArtifact = new File(tasks.jar.archiveFile.get().asFile.parent, pArtifactFilename),
               dexedArtifact = new File(tasks.dexify.getTemporaryDir(), "dexed.jar")
    doFirst {
        exec {
            workingDir dexedArtifact.parent

            // Get Android SDK paths and validate
            String androidSdk = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
            if (!(androidSdk && new File(androidSdk).exists())) {
                throw new GradleException("Set ANDROID_HOME or ANDROID_SDK_ROOT environment variables to a valid Android SDK.")
            }

            File platforms = new File(androidSdk, "platforms/")
            if (!(platforms.exists() && platforms.isDirectory())) {
                throw new GradleException("Could not find directory '${platforms.getAbsolutePath()}'." +
                        " Ensure an Android SDK is installed.")
            }

            File androidJar = new File(project.hasProperty("pAndroidSdkVersion") ?
                    new File(platforms, project.property("pAndroidSdkVersion") as String) :
                    platforms.listFiles().reverse().find
                            { it.isDirectory() && new File(it, "android.jar").exists() },
                    "android.jar")
            if (!(androidJar && androidJar.exists())) {
                throw new GradleException("Could not find 'android.jar' in '${platforms.getAbsolutePath()}'." +
                        " If there is, specify valid 'pAndroidSdkVersion' in 'gradle.properties'")
            }


            // Assemble d8 invocation
            List<File> files = configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [androidJar]
            List<String> command = ["d8", "--min-api", pMinApi,
                                    *files.collect { ["--classpath", it.path] }.flatten(),
                                    "--output", dexedArtifact, jarArtifact]

            // Awaken d8
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows'))
                commandLine("cmd", "/c", *command)
            else
                commandLine(*command)
        }
    }

    from(zipTree(jarArtifact), zipTree(dexedArtifact))
}

task buildDex dependsOn "build", "dexify"

tasks.withType(JavaCompile){
    targetCompatibility = 14
    options.encoding = "UTF-8"
    options.compilerArgs += ["-Xlint:deprecation"]
    if(JavaVersion.current() != JavaVersion.VERSION_1_8){
        options.compilerArgs.addAll(['--release', '8', '--enable-preview'])
    }
    compileJava.options.fork = true
    doFirst{
        options.compilerArgs = options.compilerArgs.findAll{it != '--enable-preview' }
    }
}

// Jabel
dependencies {
    annotationProcessor 'com.github.bsideup.jabel:jabel-javac-plugin:0.3.0'
}

// Add more tasks if needed, such as compileTestJava
configure([tasks.compileJava]) {
    sourceCompatibility = 16

    options.compilerArgs = [
            "--release", "8",
            '--enable-preview',
    ]

    doFirst {
        // Can be omitted on Java 14 and higher
        options.compilerArgs << '-Xplugin:jabel'

        options.compilerArgs = options.compilerArgs.findAll {
            it != '--enable-preview'
        }
    }
}
